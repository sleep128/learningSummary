分布式缓存

redis:
支持的数据类型：string，list，set，sorted set，hash；字符串，散列，列表，集合，有序集合。

redis持久化：
	1.RDB：在某个时间点写入一个临时文件，去替换上次的持久化文件
	2.AOF：将“操作”+“数据” 以格式化的方式追加到操作日志文件的尾部

	3.AOF：可以保持更高的数据完整性，但AOF文件比RDB更大，且恢复速度更慢

	4.RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I/O 操作。RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快


redis跟memcached的区别：https://www.imooc.com/article/23549
	1.redis主要解决了memcached单点故障的问题，
	在memcache集群中各个server存储的数据是不一样的，客户端根据key做hash判断应该存储(获取)到哪个server中。这样单台服务器故障会导致数据丢失。
	
	2.Memcached追求的高性能的内存服务；而Redis追求的不仅仅是内存运行，还有数据持久化的需求

	3.memcached可以存储文本类型的文件
	4.redis是单线程模式，memcached是多线程非阻塞io模式，
	5.redis支持数据持久化，memcachae不支持。


redis主从模式：(http://blog.csdn.net/sk199048/article/details/50725369)
		分配：主服务器负责写操作，从服务器负责读操作
		数据同步：1.全量同步：从服务器连接主服务器，发送sync命令，主服务接收到命令后执行bigsave命令，生成RDB文件，并记录在此期
				  		  间的写命令
				  		  主服务器BGSAVE执行完后，向所有从服务器发送快照文件
				          从服务器收到快照文件后丢弃所有旧数据，载入收到的快照
				          主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；
				          当从服务器载入快照完成后，再接受执行主发送来的写命令
				2.增量同步:
						全量同步完成后，开始增量同步，主服务器每执行一个写命令就会向从服务器发送相同的写命令
				redis的策略是:无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。

redis事务操作:https://www.cnblogs.com/kyrin/p/5967620.html
Redis会将一个事务中的所有命令序列化，然后按顺序执行
	1.MULTI命令：标记事务块的开始，redis会将后续命令逐个放入队列中
	2.EXEC命令：执行所有之前放入队列的命令
	3.DISCARD命令：清除所有先前在一个事务中放入队列的命令，然后恢复正常的连接状态。


redis分布式锁：
 命令:set key valve NX EX 10  当key不存在的时候设置value值，并设置其超时时间，成功返回ok,失败返回null

 分布式锁的问题：
 	1.客户端A在master节点获得了key1的锁，
 	2.master节点在把A创建的key写入slave之前宕机了。
 	3.这时候slave1变成了master节点。
 	4.由于slave1还没有key1，客户端B也获得了key1的锁。*（问题出现，客户端A,B都持有key1的锁）
 	5.现在客户端A已经做完自己的事情，去master(也就是slave1)删除当前key1,其实客户端A删除的是客户端B的锁，就会导致客户端B解锁失败。

 	解决办法：setnx 时候valve保证唯一，解锁时根据value匹配解锁。

 redis扩容，如何在数据量吞吐大的情况下保证redis的高可用？
 1.Redis主从，做读写分离。
 2.使用Redis代理twemproxy，twemproxy会根据key做hash分配到不同的主从集群。
	还可以使用Redis Cluster 

 总结：1,2结合使用。先用twemproxy根据key做hash，然后分配到不同的主从集群里再做读写分离。



 	
	




