《深入分析Java Web》P203-p227

一.JVM内存结构
    1.PC寄存器数据:
        保存当前执行程序的内存地址，Java程序是多线程执行的，非线性执行而是交叉执行，PC寄存器保存当前被中断的线程执行到哪条内存地址，以便于后面继续执行。

    2.Java栈
        Java栈对应线程，每当创建一个线程时，JVM就会为该线程创建一个对应的Java栈。由于java栈对应线程，所以栈内存线程不共享，当前线程内共享。
        java栈内存动态扩展，当系统没有足够的内存扩展则抛出OOM异常，如果
        在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。
    3.堆
        jvm只有一个堆区，被所有Java线程共享,存放new 出来的对象和数组
        设置最小堆内存:-Xms   设置最大堆内存:-Xmx
        jvm启动时被分配-Xms制定的内存大小，当无法满足时，jvm向系统申请更多的内存直到大于-Xmx，抛出OOM异常


        特殊说明 string
        String是一个特殊的包装类数据。可以用： 
        String str = new String("abc"); 
        String str = "abc"; 
        两种的形式来创建，第一种是用new()来新建对象的，它会在存放于堆中。每调用一次就会创建一个新的对象。 
        而第二种是先在栈中创建一个对String类的对象引用变量str，然后查找堆中有没有存放"abc"，如果没有，则将"abc"存放进堆，并令str指向”abc”，如果已经有”abc” 则直接令str指向“abc”。 

        String s = new String(”china”); 产生几个对象？
        通过 new 产生一个字符串（假设为 ”china” ）时，会先去常量池中查找是否已经有了 ”china” 对象，如果没有则在常量池中创建一个此字符串对象，然后堆中再创建一个常量池中此 ”china” 对象的拷贝对象。
        一个或两个。如果常量池中原来没有 ”xyz”, 就是两个。如果原来的常量池中存在“xyz”时，就是一个。

        String str1 = "abc"; 
        String str2 = "abc"; 
        System.out.println(str1==str2); //true 
        可以看出str1和str2是指向同一个对象的。 
        String str1 =new String ("abc"); 
        String str2 =new String ("abc"); 
        System.out.println(str1==str2); // false 
        用new的方式是生成不同的对象。每一次生成一个。

    4.方法区 存储类信息、常量、静态变量等数据，是线程共享的区域(属于堆中的永久带)
      这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载
        存储类的结构信息
    5.本地方法栈
        JVM运行Native方法准备的空间，由于很多native方法用c语言实现，又叫做c栈


二。JVM内存回收
    1.静态内存分配与回收。
        静态内存：在编译时就已经确定内存大小，包括原生数据类型和对象的引用
        静态内存当代码运行结束时回收

    2.动态内存的分配与回收

        GC垃圾回收：
        a.当一个对象不再被其他活动的对象引用时，这个对象就可以回收。
          活动对象指的时能够被一个根对象集合到达的对象

        b.回收算法:基于分代的垃圾回收算法
          把对象分为年轻代和年老代。
          新创的对象被分在年轻代，如果对象经过几次回收任然存活，则划分到年老代。
          年老代的收集频度不像年轻代那么频繁，这样就减少了每次垃圾收集时所要扫描对象的数量。提高垃圾回收效率

          年轻代：eden,s0,s1

问题：内存溢出场景，如何排查

分析工具：MAT是一个基于Eclipse 的内存分析工具，jmap是一个可以输出所有内存中对象的工具

问题：两个对象相互引用会不会被gc
    这取决于gc的算法，如果是引用计数算法则不会被回收
    如果是可达性分析算法则会被回收

jvm管理的内存大致包括三种不同类型的内存区域：
    1.Permanent Generation space（永久保存区域）
    2.Heap space(堆区域)
    3.Java Stacks(Java栈)

    第一种OutOfMemoryError： PermGen space
        发生这种问题的原意是程序中使用了大量的jar或class，使java虚拟机装载类的空间不够，与Permanent Generation space有关。解决这类问题有以下两种办法：

        1.增加java虚拟机中的XX:PermSize和XX:MaxPermSize参数的大小，其中XX:PermSize是初始永久保存区域大小，XX:MaxPermSize是最大永久保存区域大小。如针对tomcat6.0，在catalina.sh 或catalina.bat文件中一系列环境变量名说明结束处（大约在70行左右） 增加一行： JAVA_OPTS=" -XX:PermSize=64M -XX:MaxPermSize=128m" 如果是windows服务器还可以在系统环境变量中设置。感觉用tomcat发布sprint+struts+hibernate架构的程序时很容易发生这种内存溢出错误。使用上述方法，我成功解决了部署ssh项目的tomcat服务器经常宕机的问题。
        2.清理应用程序中web-inf/lib下的jar，如果tomcat部署了多个应用，很多应用都使用了相同的jar，可以将共同的jar移到tomcat共同的lib下，减少类的重复加载。这种方法是网上部分人推荐的，我没试过，但感觉减少不了太大的空间，最靠谱的还是第一种方法。

    第二种OutOfMemoryError：  Java heap space
        发生这种问题的原因是java虚拟机创建的对象太多，在进行垃圾回收之间，虚拟机分配的到堆内存空间已经用满了，与Heap space有关。解决这类问题有两种思路：

        1.检查程序，看是否有死循环或不必要地重复创建大量对象。找到原因后，修改程序和算法。 我以前写一个使用K-Means文本聚类算法对几万条文本记录（每条记录的特征向量大约10来个）进行文本聚类时，由于程序细节上有问题，就导致了Java heap space的内存溢出问题，后来通过修改程序得到了解决。
        2.增加Java虚拟机中Xms（初始堆大小）和Xmx（最大堆大小）参数的大小。如：set JAVA_OPTS= -Xms256m -Xmx1024m

    第三种OutOfMemoryError：unable to create new native thread
        在java应用中，有时候会出现这样的错误：OutOfMemoryError: unable to create new native thread.这种怪事是因为JVM已经被系统分配了大量的内存(比如1.5G)，并且它至少要占用可用内存的一半。有人发现，在线程个数很多的情况下，你分配给JVM的内存越多，那么，上述错误发生的可能性就越大。

        那么是什么原因造成这种问题呢？

        每一个32位的进程最多可以使用2G的可用内存，因为另外2G被操作系统保留。这里假设使用1.5G给JVM，那么还余下500M可用内存。这500M内存中的

        一部分必须用于系统dll的加载，那么真正剩下的也许只有400M，

        现在关键的地方出现了：当你使用Java创建一个线程，在JVM的内存里也会创建一个Thread对象，但是同时也会

        在操作系统里创建一个真正的物理线程(参考JVM规范)




