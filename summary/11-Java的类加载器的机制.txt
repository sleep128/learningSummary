一.java类加载机制:

    1.启动类加载器(BootstrapClassLoader):主要加载JVM自身工作需要的类，负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类

    2.扩展类加载器(ExtensionClassLoader):负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar或-Djava.ext.dirs指定目录下的jar包,ExtClassLoader的实现

    3.系统类加载器(AppClassLoader)它负责将系统类路径java -classpath或-Djava.class.path变量所指的目录下的类库加载到内存中

    4.应用程序自定义(Custom ClassLoader)自己实现ClassLoader。

二.类加载器的双亲委派模型:

    工作原理是:
        如果一个类加载器收到了类加载的请求,它不会自己去尝试加载这个类,而是把这个请求委派给父类加载器去完成,这样层层递进,最终所有的加载请求都被传到最顶层的启动类加载器中,只有当父类加载器无法完成这个加载请求(它的搜索范围内没有找到所需的类)时,才会交给子类加载器去尝试加载.
    用处：防止类被篡改。

三.类加载过程
加载
    1.通过Class的全限定名获取Class的二进制字节流
    2.将Class的二进制内容加载到虚拟机的方法区
    3.在内存中生成一个java.lang.Class对象表示这个Class

校验
    校验class文件是否合法

准备
    虚拟机会在方法区中为Class分配内存(并不产生class对象)，并设置static成员变量的初始值为默认值。注意这里仅仅会为static变量分配内存（static变量在方法区中），并且初始化static变量的值为其所属类型的默认值。
    如：int类型初始化为0，引用类型初始化为null。即使声明了这样一个static变量
    注意：准备阶段只是开辟空间赋默认值，具体赋值的操作在初始化阶段进行

解析
    解析阶段，虚拟机会将常量池中的符号引用替换为直接引用，解析主要针对的是类、接口、方法、成员变量等符号引用。

初始化
    1.在内存中构造一个class对象，执行cinit()方法，执行的是对static变量进行赋值的操作，以及static语句块中的操作。
    2.该方法是线程安全的，单例模式。

    