volatile的内存模型：
    1.首先可以解决共享变量在多线程下可见性问题。可以理解为synchronized的轻量级实现
    2.防止指令重排
    局限性：volatile只能保证变量的可见性，不能保证变量的原子性,原子性操作不能用，像++，double，long类型

    i++执行了多部操作, 1.变量i中读取读取i的值 2.值+1 3.将+1后的值写回i中

什么情况下适合用volatile：
    1.运行结果不宜懒变量的当前值，或者能够确保只有单一的线程修改变量值。
    2.变量不需要与其他的状态变量共同参与不变约束。

1.jvm内存模型:
    主内存和工作内存(栈内存中)


指令重排：
    在一个变量被volatile修饰后，JVM会为我们做两件事：
    1.在每个volatile写操作之前插入StoreStore屏障，在写操作后插入StoreLoad屏障。

    2.在每个volatile读操作前插入LoadLoad屏障，在读操作后插入LoadStore屏障.

    LoadLoad屏障：Load1;LoadLoad;Load2
        Load1,Load2代表两条读取指令。在Load2要读取的数据被访问前，保证Load1要读取的数据被读取完毕。

    StoreStore屏障：Store1;StoreStore;Store2
        Store1和Store2表示两条写入指令。在Store2写入执行前，保证Store1的写入操作对其他线程可见.

    LoadStore屏障：Load1;LoadStore;Store2
        在Store2被写入前，保证Load1要读取的数据被读取完毕。

    StoreLoad屏障：Store1;StoreLoad;Load2
        在Load2读取操作执行前，保证Store1的写入对所有线程可见。StoreLoad屏障是四种屏障中最大的.

        volatile 不能保证原子性操作但AtomicInteger可以
        Atomic 使用了CAS（比较并交换）指令 因为CAS是基于乐观锁的，也就是说当写入的时候，如果寄存器旧值已经不等于现值，说明有其他CPU在修改，那就继续尝试。
        



